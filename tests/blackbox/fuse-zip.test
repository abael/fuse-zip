#!/bin/sh
# \
exec tclsh "$0" "$@"

package require Tcl 8.5
package require tcltest 2.2
package require BLT

::tcltest::configure {*}$argv

namespace eval ::util::test {
    namespace import ::tcltest::*

    variable binary ../../fuse-zip
    variable tmpdir [ exec mktemp -d "/tmp/fuse-zip-tests-[ pid ].XXXXXXXXXX" ]
    variable mountdir [ file join $tmpdir mountPoint ]
    variable timeout [ expr {1000*5} ]

    variable status {}
    variable error {}
    variable output {}
    variable initializationState {}

    file mkdir $mountdir

    # mount --
    #
    #   Mount fuse-zip on archive fname to mountdir.
    #   Filesystem process started in background but without detaching from
    #   terminal and with debug mode enabled. Messages sent to stderr are
    #   parsed to determine finish of file system initialization process.
    #
    # Arguments:
    #   fname   Archive file name

    proc mount {fname} {
        variable binary
        variable mountdir
        variable stopped

        set ns [ namespace current ]
        set ${ns}::status {STARTED}
        # if file system stopped in abnormal way, variable
        # 'initializationState' is set to exit from vwait block.
        set cmd [ list ${ns}::status {write unset} \
            [ list apply [ list {args} {
                variable initializationState exited
            } $ns ] ] \
        ]
        trace add variable {*}$cmd
        blt::bgexec ${ns}::status \
            -output ${ns}::output \
            -onerror ${ns}::processError \
            -linebuffered true \
            $binary -d $fname $mountdir &

        vwait ${ns}::initializationState
        trace remove variable {*}$cmd
    }

    # processError --
    #
    #   Process each line of stderr of called file system.
    #   Each line is appended to 'error' list to accumulate full output.
    #   If first message successfully went from filesystem, it assumed as
    #   mounted and listeners are notified by setting variable
    #   'initializationState'.
    #
    # Arguments:
    #   data    Line to process

    proc processError {data} {
        variable initializationState
        variable error

        if {[ regexp {^   unique: 1, success, outsize: \d+$} $data ]} {
            set initializationState success
        }
        lappend error $data
    }

    # umount --
    # 
    #   Unmount filesystem.
    #   Firstly try to umount FS in a standard way via fusermount -uz.
    #   If file system is not unmounted in a specified timeout, kill filesystem
    #   process and unmount in the hard way (fusermount -uz).

    proc umount {} {
        variable mountdir
        variable status
        variable timeout
        variable output
        variable error

        set ns [ namespace current ]
        set statusVar ${ns}::status
        if {$status ne ""} {
            # not yet stopped
            exec fusermount -uz $mountdir
            set afterId [ after $timeout [ list set $statusVar KILLED ] ]
            vwait $statusVar
            after cancel $afterId
        }
        lassign $status state pid code msg
        set status {}
        if {$state eq "KILLED"} {
            puts stderr "Filesystem unmounting timed out"
            exec fusermount -uz $mountdir
        } else {
            if {$code != 0} {
                error "Filesystem returned error (code=$code): $error"
            }
            if {$output ne ""} {
                error "Unexpected output from filesystem: $output"
            }
        }
    }

    # forceumount --
    #
    #   Force kill filesystem process and free mountpoint

    proc forceumount {} {
        variable mountdir
        variable status
        
        catch {fusermount -u $mountdir}
        set [ namespace current ]::status FORCE-KILLED
        catch {exec fusermount -u $mountdir}
    }

    # content --
    #
    #   Return list of files in archive.

    proc content {fname} {
        split [ exec zipinfo -1 $fname ] "\n"
    }

    # check --
    #
    #   Check archive integrity by using 'unzip -t' command

    proc check {fname} {
        exec unzip -t $fname
    }

    configure -tmpdir $tmpdir

    test add-file-to-empty-archive {Add file to empty archive} -setup {
        set name $tmpdir/nonexistent.zip
        file delete -force $name
        mount $name
    } -body {
        umount
        file exists $name
    } -cleanup {
        forceumount
        file delete -force $name
    } -result {0}

    test mount-umount {Mount and unmount nonexistent file} -setup {
        set name $tmpdir/empty.zip
        file delete -force $name
        mount $name
    } -body {
        makeFile {file content} somefile $mountdir
        umount

        check $name
        content $name
    } -cleanup {
        forceumount
        file delete -force $name
    } -result {somefile}


    file delete -force $tmpdir
    cleanupTests
}
namespace delete ::util::test

# vim: set ft=tcl:
